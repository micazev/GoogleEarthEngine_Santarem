// Dicionário para armazenar coleções por ano e lista para dados de treinamento
var colecoesPorAno = {};
var trainingDataList = ee.List([]);

// Inicializa polígonos que foram desenhados
var aguaFeature = ee.Feature(agua, {classe: 1});
var florestaFeature = ee.Feature(floresta, {classe: 2});
var urbanoFeature = ee.Feature(urbano, {classe: 3});
var geometryCollection = ee.FeatureCollection([aguaFeature, florestaFeature, urbanoFeature]);

// Loop para gerar dados de treinamento
for (var imagem in melhoresVisualizacoes) {
  var trainingData = imagem.sampleRegions({
    collection: geometryCollection,
    properties: ['classe'],
    scale: 30
  });
  trainingDataList = trainingDataList.add(trainingData);
}

// RANDOM FOREST

// Converter a lista de dados de treinamento em um único FeatureCollection
var combinedTrainingData = ee.FeatureCollection(trainingDataList).flatten();
  
  // Treinar o classificador
var classifier = ee.Classifier.smileRandomForest(50).train({
  features: combinedTrainingData,
  classProperty: 'classe',
  inputProperties: ['B1', 'B2', 'B3', 'B4', 'B5', 'B7']  
});

// Classificar cada imagem selecionada, adicioná-la ao mapa e salvar no drive
for (var ano in imagemDoAno) {
  var imagem = ee.Image(colecoesPorAno[ano].toList(colecoesPorAno[ano].size()).get(imagemDoAno[ano]));
  var classifiedImage = imagem.classify(classifier);
  
  // Adicionar a imagem classificada ao mapa
  Map.addLayer(classifiedImage, {min: 1, max: 3, palette: ['blue', 'green', 'yellow']}, 'Classificação ' + ano);
  
    // Exportar a imagem classificada para o Google Drive
  Export.image.toDrive({
    image: classifiedImage,
    description: 'Classificacao_' + ano,
    scale: 30,
    region: shapefile.geometry(),
    fileFormat: 'GeoTIFF'
  });
}
